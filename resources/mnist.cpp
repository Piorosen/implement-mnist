#include <iostream>
#include <array>
#include <algorithm>
#include <fstream>
#include <string>

constexpr std::array<std::array<float, 49>, 30> dense1_weight { 0.2830,0.6865,1.3544,1.3721,1.4184,0.8630,0.2777,0.1716,-0.1642,0.0740,0.2674,-0.2196,-0.0983,-0.4762,0.2538,-0.1617,-0.1181,-0.0448,-0.1273,0.1574,-0.8015,0.3625,-0.1233,-0.2710,0.2697,-0.3151,0.4795,0.6702,-0.8041,-0.0777,0.8131,0.6594,0.1151,0.2628,1.0731,-0.4321,-0.1259,0.3603,0.4994,0.2771,-0.3592,0.3694,-0.2260,-0.6699,-1.2688,-1.2750,-1.2437,-1.3386,-0.2023,0.2012,0.6666,1.0600,1.1757,0.9603,0.7019,-0.0526,0.1535,0.1275,0.1227,0.0171,-0.1163,-1.0421,-0.7614,-0.2122,-0.0188,-0.0137,-0.1266,-0.8206,-0.4163,-0.2612,0.1768,-0.4225,-0.5726,0.6150,-0.0552,0.5779,0.2179,-0.4446,-0.5157,0.1909,0.8185,0.2330,0.0860,-0.1964,-0.2320,-0.3327,-0.0534,0.4288,-0.0071,-0.8343,-0.5873,-0.0804,-0.8163,-1.0385,-0.6478,-0.5436,-0.8303,0.1002,0.3733,0.1336,0.2897,0.7762,1.0821,1.2243,-0.2327,-0.0779,-0.4943,-0.9127,-0.5066,0.6670,0.1956,-0.4140,-0.4135,-0.5912,-0.1065,0.6420,-0.9498,0.1881,0.2334,-0.2355,-0.2995,0.0936,-0.0503,0.2253,0.3246,-0.3517,-0.4562,-0.4322,0.7575,-0.1974,-0.1119,-0.4000,-0.2590,-0.2524,0.0731,0.3716,0.3163,-0.2887,-0.3340,0.1834,-0.1430,-0.1418,0.3216,0.1048,-0.0209,0.1158,0.0848,-0.3851,-0.4582,-0.5181,-1.2951,-1.0550,-1.0256,0.1932,-0.0049,-0.4385,0.1258,0.8270,0.2099,-0.2302,0.1638,-0.8447,0.6974,0.9715,-0.3741,0.3112,0.6042,0.0672,-0.3827,0.1169,0.4238,0.0883,0.2984,0.1292,0.8588,-1.1632,0.2266,0.7324,0.3006,0.2668,-0.1504,0.0765,-0.4419,-0.7013,-0.3492,0.2601,0.2386,0.4612,-0.3298,-0.1666,-0.8634,-0.2291,0.3590,0.3707,0.1860,-0.0230,0.2961,0.1950,0.3993,0.0178,0.0474,0.9781,-0.1784,0.2912,0.1218,0.0966,-0.9698,-0.9718,-0.4692,0.6860,0.4432,-0.0711,-0.0776,0.1548,0.4139,0.7818,0.3198,0.6232,0.6041,0.4284,-0.3643,0.1095,0.2045,-0.5035,-0.6450,-0.0986,0.0844,0.5842,0.1736,-0.5728,-0.8839,-0.7965,-0.8644,-0.2559,0.0432,-0.4237,-0.2962,-0.1881,-0.3227,0.2679,0.7493,0.7287,0.4835,0.0863,0.2475,-0.1919,0.0282,-0.4595,-0.8422,-0.5601,-0.4549,-0.0388,-0.0726,-0.6852,-0.1827,0.0617,0.4262,0.6418,1.2720,-0.1583,-0.5089,0.5473,0.7415,0.1598,0.4154,1.8531,-0.2555,0.1620,0.5261,-0.5320,-0.7423,-0.1877,-0.3039,-0.6905,0.0369,0.4571,-0.3917,-0.2294,-0.0382,-0.9003,-0.4172,-0.3337,0.4857,0.1700,0.0838,-0.1099,-0.1630,-0.2942,-1.0669,0.0817,-0.0490,-0.3400,-0.1592,-0.0381,0.2159,-0.2919,0.3462,-0.0364,-0.0596,0.5836,-0.3529,-0.1540,0.2346,0.2498,0.2968,0.0750,0.0069,-0.0545,-0.5875,0.0225,0.4216,0.0340,0.3327,0.7835,-0.6563,-0.1871,0.6024,0.7396,0.1434,0.6026,0.6683,0.1134,-0.3967,-0.0613,0.6110,0.0990,0.5761,-0.0867,-0.6704,0.1156,-0.8484,-0.4150,0.1691,-0.1324,-0.5009,-0.1646,0.1494,0.4335,0.0465,-0.0867,-0.3051,-0.3116,-0.2644,-0.1727,-0.1186,-0.2008,-0.5061,-0.2671,0.9698,-0.0985,-0.3787,-0.9123,-1.0283,-0.2842,0.0775,0.4894,0.8072,-0.6668,-1.0199,0.0700,0.3331,-0.1292,-0.0913,0.8818,-0.5772,-0.1949,0.3502,0.8767,-0.1429,-0.5511,-0.9147,-0.6636,-0.7948,-0.1004,0.1971,-0.3018,-0.7645,-1.5745,-0.6773,-0.4392,-0.0661,0.2854,-0.0697,-0.5399,-0.4065,0.0618,-0.3699,-0.3434,-0.1805,-0.0971,0.3532,-0.0684,-0.0468,-0.6779,-0.7610,-1.4156,-0.5864,-0.1778,-0.0413,0.0873,0.5826,0.0830,-0.3673,-0.1369,-0.3176,-0.1429,0.1787,-0.2223,0.0250,0.2536,0.0659,-0.6736,-0.8496,-0.2635,0.4709,0.3131,0.2411,0.6738,0.0885,-1.0320,0.6454,0.1235,-0.3743,-0.3317,0.2391,0.1027,-1.2279,0.3266,-0.4116,-0.7465,0.3494,0.2061,-0.3056,-0.3781,0.3257,1.5902,1.1269,0.5642,0.4978,0.7495,0.1309,0.3556,0.5381,1.0993,1.0063,1.5676,0.7111,0.2149,-0.0093,0.1645,0.2514,0.3800,0.3384,0.5506,0.8071,-0.2863,0.3075,-0.0803,0.4545,-0.3641,-0.3643,1.4271,-0.1004,-0.5466,-0.1534,0.8093,-0.6840,-0.7491,-0.7593,0.6650,0.4743,-0.3534,-0.3802,0.3252,0.3820,-0.5599,0.4893,0.8660,0.5227,0.4893,0.2741,0.3479,-0.0930,0.0018,-0.2931,0.3340,-0.1151,-0.7144,-0.0048,-0.1666,-0.1033,0.0465,-0.3074,-0.6081,0.0433,0.8708,-0.2539,-0.3324,-0.4685,-0.2139,0.1733,0.5000,0.5876,1.2309,-0.3784,-0.6122,0.5954,-0.5385,-0.9544,-0.8068,0.2192,-0.6605,0.2341,0.5459,0.2030,0.4641,-0.1184,-0.9162,-0.4194,-0.6537,-0.0281,-0.0424,0.4456,-0.2508,-1.0060,-0.0931,-0.5892,-0.2536,0.1691,0.3792,-0.1820,-0.4826,0.1016,0.2786,0.3924,0.2010,-0.0271,0.5026,0.1769,0.0943,-0.0850,0.1581,0.5883,0.1393,-0.9414,-0.0850,0.1935,0.4509,0.7345,0.3341,0.2920,0.2296,-0.0066,-0.0127,0.4504,0.0496,-0.3145,0.2261,0.2344,0.7971,-0.2638,-0.7385,-0.1473,0.6865,-0.1836,0.1733,0.1552,0.6072,0.2380,0.4487,0.3479,-0.0955,0.2324,0.4970,0.4617,0.6023,0.1573,-0.0899,0.6837,0.6258,0.5907,0.1621,-0.5738,-0.4795,-0.0941,-0.3333,-0.4008,-0.0314,0.0556,0.6329,1.6258,1.3397,1.2616,0.8726,0.0975,0.0317,0.4514,0.5551,0.0982,0.1352,0.4789,0.7481,0.2527,0.1276,0.2545,-0.4430,-0.6672,0.0111,0.5355,-0.1346,-0.2418,0.5207,-0.3652,0.1728,-0.0156,0.8610,-0.4360,1.0564,0.2390,0.2457,0.6184,0.7127,1.2745,0.2332,0.2211,0.2512,0.3264,0.3246,0.5525,0.7078,-0.1655,-0.7673,-0.7831,-0.8868,-0.7655,-0.5398,0.1843,-0.0367,-0.2516,-1.5572,-1.8871,-2.0794,-1.1087,-0.1003,-0.0256,-0.2845,-0.3523,-0.1362,0.2918,-0.0043,-0.3995,-0.0891,0.3875,0.6121,0.1264,0.1322,0.1305,-0.7252,0.5525,0.1930,-0.3840,0.3881,0.3916,0.2181,-0.6500,-0.2868,-1.0561,-0.2640,0.6148,-0.3988,-1.2820,-1.0649,-0.5467,-0.2478,-0.4016,-0.0318,-0.3703,-0.6605,-0.7376,-0.0774,0.7457,0.6291,0.6955,0.5774,0.6378,-0.0809,-0.0827,-0.7213,-1.3848,-1.3540,-0.6196,-0.8252,-0.0628,0.0768,-0.0309,0.5272,0.5230,0.1762,0.2737,1.6859,-0.1377,0.3119,0.5360,0.1371,0.0545,0.7499,1.8089,-0.3075,0.0145,0.2357,0.3817,0.4984,0.3430,-0.3581,0.1709,0.0191,-0.5498,-0.4393,0.2153,0.0745,-1.0719,0.1731,0.0632,0.1195,0.2923,-0.0975,-0.2462,-0.4792,0.2672,0.2567,0.9872,0.8604,0.0720,-0.4150,-0.3724,0.1375,0.4835,1.1189,1.1349,1.5357,1.2166,0.2720,-0.2154,-0.9267,-0.3965,0.3866,0.2184,-0.1521,-0.3993,-0.1453,-0.6677,0.5103,0.1610,-1.4932,-1.0155,-0.8319,-0.3925,-0.0339,-0.0287,-0.1418,-0.2889,0.0105,-0.0142,-0.7316,0.3365,-0.0017,0.1698,0.3148,0.2662,0.7031,0.0858,0.2094,0.0750,0.5399,0.1853,-0.0801,0.7516,-0.3194,-0.8347,-1.0690,-1.2018,-1.6225,-1.0073,-0.0501,-0.1329,-0.2645,-1.1069,-1.0248,-0.8043,-0.8119,-0.3654,-0.1988,0.1639,0.2780,-0.7829,-0.0811,0.8320,1.2270,-0.1566,-0.0361,0.2371,-0.1643,0.3497,0.2397,1.2420,-0.0352,0.5040,0.3835,-0.1648,-0.4182,-0.0013,-0.0665,-0.8513,0.0791,-0.0673,0.1015,-0.2987,-0.3386,-0.4578,-0.6558,-0.2807,0.1319,0.0220,0.2881,0.3151,-0.2535,-0.4310,-1.2637,-1.0680,-0.6982,-0.7271,-0.8597,0.0194,-0.0976,-0.2079,-0.7158,-0.7262,-0.9558,-1.1227,-0.1386,0.0221,-0.8055,-1.0182,-0.3474,-0.4183,-0.4448,0.1702,-0.1006,-0.1479,0.4064,0.7331,0.5381,0.4154,1.3421,0.2212,0.0682,-0.0211,-0.1151,-0.4402,-0.5761,0.1906,-0.6351,0.2502,0.1660,0.2428,-0.2290,-0.9215,0.2352,-0.8352,0.0522,0.0944,-0.2797,-0.2334,0.3438,0.0571,-0.0868,-0.1235,0.5338,0.6963,0.8737,0.9860,0.2117,0.0108,-0.5202,-1.1009,-0.9527,-0.8629,-1.0728,-0.0830,0.3411,0.2209,0.3718,0.6982,0.5435,-0.1774,-0.4679,0.6919,0.3427,0.1952,0.1728,0.6607,0.6368,-0.9442,0.4458,0.2632,-0.0159,-0.7699,-0.0571,0.2332,0.0391,0.8607,0.2789,-0.3846,-0.2790,0.1352,-0.4937,-0.6482,0.4669,0.7360,0.2850,0.3083,0.1357,-0.2575,-0.2055,0.0392,1.1771,1.0835,0.7545,0.8455,0.9816,0.0016,-0.3536,0.2739,0.2794,0.6366,0.1460,-0.5560,-0.0688,0.2529,-0.2391,0.2829,0.7278,0.3853,-0.6229,-1.2039,-0.1126,-0.0997,-0.1306,-0.2016,0.0235,0.0993,0.1946,-0.0904,-0.4332,-0.2455,0.5849,0.2446,-0.4306,-0.2961,0.6195,0.5312,0.0604,0.0976,0.2446,0.3594,0.6790,0.9739,0.6799,0.2292,-0.1402,0.0977,0.5477,0.7599,0.3942,0.6376,0.8270,0.8442,0.9243,1.0697,0.4192,-0.1994,-0.1174,-0.4130,-0.6253,-0.2495,-0.4641,-0.1269,-0.5115,0.2110,0.4477,0.3818,0.5721,0.7828,0.8995,0.0492,0.4587,0.1414,0.0590,-0.0788,0.7190,1.5092,-0.1607,-0.2440,0.0655,0.1244,-0.1120,-0.6147,-0.2829,0.5151,0.3180,-0.2454,-0.6448,0.1354,0.6435,-0.3741,0.3844,0.5699,0.3573,0.2446,0.2799,0.3806,-0.0331,0.0730,-0.3603,0.5702,0.4845,-0.5734,-0.4805,-0.1384,-0.1701,-0.2914,-0.3626,-0.9075,-0.8559,-0.7748,0.2868,-0.2236,-0.3346,-0.4394,0.2883,0.1637,0.2499,0.2873,-0.5585,-0.2538,-0.0923,-0.0990,0.1419,0.1034,0.5155,-0.4954,0.0309,0.1548,0.7089,0.3952,-0.3817,-0.5756,-0.0988,-0.1783,-0.0038,0.6852,-0.2401,-0.1563,0.3808,-0.1101,0.0411,-0.0781,-0.1072,0.4214,1.0017,0.1141,-0.0053,-0.4452,-0.1619,0.2101,0.3183,0.4686,0.1741,-0.0604,-0.3010,-1.0341,-1.1483,-0.8908,-0.4710,-0.2529,0.3215,0.3106,0.5309,0.1769,-0.0623,0.2834,0.9068,0.5781,0.5005,0.3692,0.4339,0.1282,0.2188,1.5859,0.6308,-0.6794,-0.3272,0.6646,-0.0528,-0.4439,-0.5811,0.2785,-0.7797,-0.9501,0.1121,0.0436,-0.2760,-1.3853,0.0158,0.1901,0.0744,0.2050,0.0924,-0.7781,-0.9361,-0.0292,0.3585,0.9112,0.9361,0.6630,0.3282,-0.0404,-0.3238,-0.8166,-0.8307,-0.7283,-0.5871,-1.0554,0.3239,0.0791,0.4228,0.2248,-0.4445,-0.1087,0.0548,-0.6101,0.5291,0.1659,0.4477,-0.1649,0.1326,0.0696,-1.3452,0.8057,0.4171,0.0544,-0.6142,0.8014,0.0368,0.6302,-0.3417,0.1221,-0.4144,0.2430,0.7098,0.2591,0.8010,-0.2077,-0.2760,-0.0745,-0.4748,-0.6561,-0.2086,0.6519,-0.3237,0.2459,0.0497,-0.0240,-0.0041,0.0674,0.2742,-0.0307,0.7678,0.4356,0.6018,0.6318,0.8621,0.0401,0.0052,0.5346,0.0857,-0.0476,-0.0466,0.0110,-0.8898,0.0241,-1.0914,-0.7121,0.3019,0.1431,-0.1807,-0.9045,-0.3577,0.3342,0.6851,-0.2534,0.1337,0.5524,-0.4960,0.8724,0.1847,-0.0119,-0.3862,0.4350,0.3909,-0.6706,0.1658,-0.3006,0.0453,0.5911,-0.1040,-1.1205,-0.3996,0.4189,0.8547,0.2989,-0.3680,-1.5558,-0.7309,-0.1238,-0.2169,0.0718,0.0004,-0.0204,-0.1858,-0.4862,0.2154,0.4692,0.7459,0.8839,0.2956,0.1414,-0.1371,-0.8163,1.0402,0.6133,0.1647,0.3301,0.4830,0.1252,-1.1552,0.5411,-1.0262,-0.8735,-0.8132,-0.2421,-0.4478,-0.2297,0.5803,-0.5100,-0.7147,-0.0017,0.0890,0.4980,0.7777,0.9391,0.5319,0.4621,0.5523,0.5845,-0.0766,0.6764,0.0112,0.4441,0.8003,0.4680,0.4818,-0.0544,0.0786,0.0357,0.3518,-0.3978,-0.9666,-1.2957,-0.9249,0.0064,-0.0222,-0.4034,-0.5696,0.3248,0.1587,-0.7928,-1.1466,0.6197,0.1746,0.7420,0.4911,0.4685,0.1870,-0.7906,0.3001,0.3431,0.0294,-0.7640,-0.2435,0.2058,0.0613,-0.0037,0.0933,0.0777,-0.6126,0.1336,-0.2138,-0.3886,-0.2625,0.6161,0.4020,0.3254,-0.3574,-0.5183,0.1193,0.1358,1.1485,0.9979,1.0615,0.9096,0.9682,0.2901,0.2749,0.4999,0.5538,0.4479,0.5008,0.3513,-0.2434,-0.5777,-0.0242,0.7538,0.7852,-0.3521,-0.5318,-0.6404,-0.4201,0.5115,0.8473,-1.3481,-0.2570,-0.0780,-0.5696,-0.3522,0.8052,-0.0101,-0.7040,0.1233,0.5613,0.2042,-0.1000,-0.1018,0.4651,-0.2756,-0.0432,0.7499,-0.1931,-0.2990,-0.3687,-0.4613,-0.1008,0.5036,0.7346,-0.6814,-0.0827,0.1943,-0.3275,-0.6162,-0.0348,0.6219,-0.1582,-0.1807,-0.7643,-1.1601,-0.7483,-0.8360,-0.8440,-0.0243,-0.1396,0.1216,-0.0801,-0.0386,0.6079,0.3856,0.1865,-0.3587,-0.3429,-0.1363,-0.8429,0.5680,0.4441,-0.8888,-0.6656,0.4022,0.6527,-0.4836,0.0019,0.2012,0.4398,-0.1461,0.4564,0.4236,-0.0301,0.1329,-0.3281,1.0215,0.3276,0.3254,-0.2338,-0.1879,0.1696,0.5634,0.6377,0.2869,-1.1751,-1.1214,-0.5116,-0.8649,-0.7167,-0.0711,-0.0442,-0.1137,0.0538,0.1944,-0.1582,-0.4841,0.1923,-0.2836,-0.0531,0.2245,0.2654,0.0098,-0.2133,-0.9220,-0.4005,0.0844,0.3752,-0.2687,0.1536,-0.6786,-0.9646,-0.4415,-1.6461,-1.1832,0.2232,-0.3703,-0.4566,0.6843,-0.4473,-0.3651,0.7049,0.6674,-0.4878,-0.1454,1.0555,-0.4464,0.1951,0.1649,0.0763,-0.0459,0.7846,0.5294,-0.1657,-0.4879,-0.8165,-0.4706,-0.7876,-0.5826,0.0007 };
constexpr std::array<float, 30> dense1_bias { 0.0965,0.1755,-0.2109,-0.3271,0.5775,0.1297,-0.0446,0.3461,0.5917,0.3193,0.0161,0.0016,0.2900,0.2562,-0.0989,0.1476,0.2764,0.3655,-0.0503,0.0658,-0.0822,0.2582,0.1971,0.6285,0.1837,0.1233,0.2007,-0.0821,0.1407,0.1160 };
constexpr std::array<std::array<float, 30>, 10> dense2_weight { -0.0088,-1.2044,0.6021,0.1869,-0.7447,0.9807,0.2122,-0.7329,-0.9132,-0.4012,-0.7527,-0.5996,0.0363,-1.0646,0.0883,-0.0762,0.3775,0.0184,0.7701,-0.5783,0.5598,-1.0096,-1.4287,-0.6280,0.5137,-0.1605,1.1519,0.4813,0.5424,-0.8877,0.1970,0.6254,-1.7463,-1.4745,-1.2684,-0.5510,-1.1483,0.9403,-0.6813,0.4547,-0.4532,0.5694,-1.0326,0.2922,-1.3687,0.6892,0.4238,0.7048,-0.7463,0.1723,-0.6595,0.5716,0.1609,-0.4053,-0.5804,0.0610,-0.9164,-0.7265,0.3825,0.7288,0.3400,-0.0400,-0.0649,0.1507,-0.5774,-0.8347,-0.0956,-0.9940,-0.8015,-0.1701,-1.2528,0.6409,1.0301,-0.7654,-0.4275,0.0473,-0.4167,-0.1157,0.2499,0.4776,-0.0428,0.0517,-0.9465,0.7529,-0.3349,0.6109,-0.2613,-2.0456,0.5637,1.1149,-0.5932,-0.6317,-0.7318,-0.5025,-0.5984,-0.9041,-0.0281,-0.5388,0.5163,0.4920,-0.4760,0.3307,-0.2121,-0.1428,0.3587,-1.2194,-0.8500,-0.7032,0.3953,0.7412,0.6765,0.0224,0.6142,-0.9053,0.6037,0.5095,-0.0762,-1.3490,-0.0233,-0.9876,-0.3807,-0.6419,-0.8304,0.1311,0.3948,-0.2106,0.5927,0.6163,0.6506,-1.1229,0.3124,-0.4001,0.2507,0.1849,0.1611,-0.4422,0.5735,-0.8372,-0.4651,-1.1198,-0.5921,0.2908,-0.2009,0.5122,0.1165,-1.0767,-1.2457,-0.3859,0.8637,-0.0909,-0.9213,-0.6174,-0.6030,-0.4218,0.6846,0.5373,-0.6226,0.2883,-0.2265,0.6463,1.0330,-0.3469,0.4391,-0.9323,0.3977,0.2914,0.4021,1.0673,-0.0746,-0.0884,0.7713,-0.0769,0.4212,-0.5784,-0.2451,-0.4152,-0.0866,0.5376,-0.4478,-1.0330,0.7260,1.0641,1.1816,-0.1953,0.3835,-0.1392,0.4306,0.4272,-0.1183,0.0363,0.4127,-0.4632,0.6584,-1.0840,-0.2683,0.7265,-0.0744,-1.1955,-0.7418,-0.6158,-0.7251,-0.3716,-0.8184,-0.6870,0.6924,-0.8797,-0.6207,0.8099,-0.4123,-0.9785,-0.1791,0.6452,-1.0594,-0.2885,0.7813,-0.2989,-0.0689,-1.0986,0.4327,-1.2428,-0.8864,-0.5350,-0.2378,0.5587,-0.0422,-0.6550,-0.6753,0.1151,0.7234,-0.4289,-0.7206,-0.5364,0.6830,0.8357,-0.1995,0.5849,0.5878,-0.6462,-0.8893,0.7528,-0.1364,0.1131,0.8173,0.8880,-0.5421,0.2915,0.4218,0.1825,-1.0142,-0.2014,0.0158,0.4310,-0.2591,0.3760,0.3519,-1.0385,-0.1292,-0.0715,0.0412,0.0291,0.3663,0.2072,0.5911,-1.0682,-0.8998,-0.4460,-0.3794,-0.5096,-0.2632,-0.2738,-0.8260,-0.8155,0.5290,0.3714,0.1960,-0.5708,0.4078,0.6521,0.6893,-0.6477,0.6026,-0.6610,-0.6725,0.6669,-0.2054,-0.7021,-1.2181,0.3227,0.2421,0.5428,-0.9608,0.4250,-0.0393,-0.1949,-0.2609,-1.2937,0.4236,0.9771,-0.2998,-0.8080 };
constexpr std::array<float, 10> dense2_bias { -0.1632,0.4315,-0.1243,0.0328,0.2802,-0.0418,-0.0558,0.1394,-0.4219,0.0026 };

// Function to flatten a 2D array into a 1D array
template<typename T, size_t N, size_t M>
std::array<T, N* M> flatten(const std::array<std::array<T, M>, N>& arr2D) {
    std::array<T, N* M> flattened;
    size_t index = 0;
    for (const auto& row : arr2D) {
        for (const auto& element : row) {
            flattened[index++] = element;
        }
    }
    return flattened;
}

template<typename T, size_t I, size_t O>
std::array<T, O> dense(const std::array<std::array<T, I>, O>& weights,
    const std::array<T, O>& biases,
    const std::array<T, I>& input,
    const bool use_relu = false) {
    std::array<T, O> output {};

    for (size_t i = 0; i < weights.size(); ++i) {
        double weightedSum = biases[i];
        for (size_t j = 0; j < weights[i].size(); ++j) {
            weightedSum += weights[i][j] * input[j];
        }
        if (use_relu) {
            output[i] = std::max(0.0, weightedSum); // ReLU activation
        }
        else {
            output[i] = weightedSum;
        }
    }
    return output;
}

template<typename T, size_t I, size_t O>
std::array<std::array<T, O>, O> resize(const std::array<std::array<T, I>, I>& input) {
    int rows = input.size();
    int cols = input[0].size();
    std::array<std::array<T, O>, O> output{};
    int resizeRatio = rows / output.size();
    for (int i = 0; i < output.size(); ++i) {
        for (int j = 0; j < output[0].size(); ++j) {
            float sum = 0;
            for (int k = 0; k < resizeRatio; ++k) {
                for (int l = 0; l < resizeRatio; ++l) {
                    sum += input[i * resizeRatio + k][j * resizeRatio + l];
                }
            }
            output[i][j] = sum / (resizeRatio * resizeRatio);
        }
    }
    return output;
}

int main(int argc, char** argv) {
    std::string data = std::string(argv[1]);
    std::array<std::array<float, 28>, 28> input;
    if (data == "file") { 
        std::string file_path = std::string(argv[2]);
        std::ifstream fin(file_path);
        for (int y = 0; y < 28; y++) {
            for (int x = 0; x < 28; x++) {
                fin >> input[y][x];
            }
        }
    }else { 
        for (int y = 0; y < 28; y++) {
            for (int x = 0; x < 28; x++) {
                std::cin >> input[y][x];
            }
        }
    }

    auto sized = resize<float, 28, 7>(input);
    auto flat = flatten(sized);
    auto dense1 = dense(dense1_weight, dense1_bias, flat, true);
    auto dense2 = dense(dense2_weight, dense2_bias, dense1, false);
    int max_idx = std::max_element(dense2.begin(), dense2.end()) - dense2.begin();
    std::cout << max_idx << "\n";
    
    return 0;
}
